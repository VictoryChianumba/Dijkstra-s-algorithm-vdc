import pygame, sys
from tkinter import messagebox, Tk

pygame.init()
sw = 500
sh = 500
screen = pygame.display.set_mode((sw, sh))

columns = 25
rows = 25

box_width = sw // columns
box_height = sh // rows

grid = []
queue = []
path = []

class Box:
    def __init__(self, i, j):
        self.x, self.y = i, j
        self.start = False
        self.wall = False
        self.target = False
        self.queued = False
        self.visited = False
        self.neighbors = []
        self.prior = None

    def draw(self, win, color):
        pygame.draw.rect(win, color, (self.x * box_width, self.y * box_height, box_width - 2,  box_height -  2))

    def set_neighbors(self):
        if self.x > 0:
            self.neighbors.append(grid[self.x - 1][self.y])
        if self.x < columns - 1:
            self.neighbors.append(grid[self.x + 1][self.y])
        if self.y > 0:
            self.neighbors.append(grid[self.x][self.y - 1])
        if self.y < rows - 1:
            self.neighbors.append(grid[self.x][self.y + 1])

# create grid   
for i in range(columns):
    arr = []
    for j in range(rows):
        arr.append(Box(i,j))
    grid.append(arr)

# set the neighbors 
for i in  range(columns):
    for j in range(rows):
        grid[j][i].set_neighbors()

start_box = grid[0][0]
start_box.start = True
start_box.visited = True
queue.append(start_box)

def main():
    begin_search = False
    target_box_set = False
    searching = True
    target_box = None

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEMOTION:
                x = pygame.mouse.get_pos()[0]
                y = pygame.mouse.get_pos()[1]

                if event.buttons[0]:
                    i = x // box_width
                    j = y // box_height
                    grid[i][j].wall = True
                
                if event.buttons[2] and not target_box_set:
                    i = x // box_width
                    j = y // box_height
                    target_box = grid[i][j] 
                    target_box.target = True
                    target_box_set = True

            if event.type == pygame.KEYDOWN and target_box_set:
                begin_search = True
            
        if begin_search:
            if len(queue) > 0 and searching:
                current_box = queue.pop(0) 
                current_box.visited = True
                if current_box == target_box:
                    searching = False
                    while current_box.prior != start_box:
                        path.append(current_box.prior)
                        current_box = current_box.prior
                else:
                    for neighbor in current_box.neighbors:
                        if not neighbor.queued and not neighbor.wall:
                            neighbor.queued = True
                            neighbor.prior = current_box
                            queue.append(neighbor)
            else:
                if searching:
                    Tk().wm_withdraw()
                    messagebox.showinfo('No solution', 'There is no solution')
                    searching = False
            
        screen.fill('purple')


        for i in range(columns):
            for j in  range(rows):
                box = grid[i][j]
                box.draw(screen, (20,20,20))
                if box.queued:
                    box.draw(screen, (200,0,0))
                if box.visited:
                    box.draw(screen, (0,200,0))
                if box in path:
                    box.draw(screen, (0,0,200))
                if box.start:
                    box.draw(screen, (0,200,200))
                if box.wall:
                    box.draw(screen, (90,90,90))
                if box.target:
                    box.draw(screen, (200,200,0))
            
        pygame.display.update()

main()